{"version":3,"sources":["../src/spherical-coordinates.js"],"names":["formatValue","equals","config","degrees","radians","clamp","Vector3","vec3_length","assert","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","phi","theta","radius","bearing","pitch","altitude","radiusScale","length","check","Math","PI","Number","isFinite","formatString","printTypes","printDegrees","f","other","constructor","copy","lng","lat","z","v","atan2","acos","rotateX","rotateZ","max","min"],"mappings":"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","file":"spherical-coordinates.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from './common';\nimport {degrees, radians, clamp} from './common';\nimport Vector3 from './vector3';\n\n/* eslint-disable camelcase */\nimport vec3_length from 'gl-vec3/length';\nimport assert from './lib/assert';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   * @class\n   * @param {Number} phi=0 - rotation around X (latitude)\n   * @param {Number} theta=0 - rotation around Y (longitude)\n   * @param {Number} radius=1 - Distance from center\n   */\n  /* eslint-disable complexity */\n  constructor({\n    phi, theta, radius,\n    bearing, pitch, altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    if (arguments.length === 0) {\n      this.phi = 0;\n      this.theta = 0;\n      this.radius = 1;\n    } else if (Number.isFinite(phi) || Number.isFinite(theta)) {\n      this.phi = phi || 0;         // up / down towards top and bottom pole\n      this.theta = theta || 0;     // around the equator of the sphere\n    } else if (Number.isFinite(bearing) || Number.isFinite(pitch)) {\n      this.bearing = bearing || 0;         // up / down towards top and bottom pole\n      this.pitch = pitch || 0;     // around the equator of the sphere\n    }\n    this.radius = radius || 1;   // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    this.check();\n  }\n  /* eslint-enable complexity */\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes, printDegrees}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi);\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius &&\n      this.theta === other.theta &&\n      this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() { return 180 - degrees(this.phi); }\n  set bearing(v) { this.phi = Math.PI - radians(v); }\n  get pitch() { return degrees(this.theta); }\n  set pitch(v) { this.theta = radians(v); }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() { return degrees(this.phi); }\n  get latitude() { return degrees(this.theta); }\n  get lng() { return degrees(this.phi); }\n  get lat() { return degrees(this.theta); }\n  get z() { return (this.radius - 1) * this.radiusScale; }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3_length(v);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n  }\n\n  check() {\n    // this.makeSafe();\n    assert(Number.isFinite(this.phi) && Number.isFinite(this.theta) && this.radius > 0);\n    return this;\n  }\n}\n"]}
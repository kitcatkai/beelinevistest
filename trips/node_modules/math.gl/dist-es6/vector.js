var _createClass=function(){function defineProperties(target,props){for(var descriptor,i=0;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,'value'in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError('Cannot call a class as a function')}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');return call&&('object'==typeof call||'function'==typeof call)?call:self}function _inherits(subClass,superClass){if('function'!=typeof superClass&&null!==superClass)throw new TypeError('Super expression must either be null or a function, not '+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}import MathArray from'./math-array';import{checkNumber}from'./common';var Vector=function(_MathArray){function Vector(){return _classCallCheck(this,Vector),_possibleConstructorReturn(this,(Vector.__proto__||Object.getPrototypeOf(Vector)).apply(this,arguments))}var _Mathsqrt=Math.sqrt;return _inherits(Vector,_MathArray),_createClass(Vector,[{key:'len',value:function len(){return _Mathsqrt(this.lengthSquared())}},{key:'magnitude',value:function magnitude(){return _Mathsqrt(this.lengthSquared())}},{key:'lengthSquared',value:function lengthSquared(){for(var length=0,i=0;i<this.ELEMENTS;++i)length+=this[i]*this[i];return length}},{key:'distance',value:function distance(mathArray){return _Mathsqrt(this.distanceSquared(mathArray))}},{key:'distanceSquared',value:function distanceSquared(mathArray){for(var dist,length=0,i=0;i<this.ELEMENTS;++i)dist=this[i]-mathArray[i],length+=dist*dist;return checkNumber(length)}},{key:'dot',value:function dot(mathArray){for(var product=0,i=0;i<this.ELEMENTS;++i)product+=this[i]*mathArray[i];return checkNumber(product)}},{key:'normalize',value:function normalize(){var length=this.magnitude();if(0!==length)for(var i=0;i<this.ELEMENTS;++i)this[i]/=length;return this.check()}}]),Vector}(MathArray);export default Vector;
//# sourceMappingURL=vector.js.map
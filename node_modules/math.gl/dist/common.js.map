{"version":3,"sources":["../src/common.js"],"names":["configure","checkNumber","formatValue","formatAngle","isArray","clone","radians","degrees","sin","cos","tan","asin","acos","atan","clamp","equals","config","EPSILON","debug","precision","printTypes","printDegrees","printRowMajor","options","epsilon","value","Number","isFinite","Error","round","Math","parseFloat","toPrecision","printAngles","Array","ArrayBuffer","isView","length","array","map","func","result","i","PI","angle","min","max","a","b","abs"],"mappings":"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","file":"common.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-shadow */\n// TODO - remove\nconst config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\n\nexport {config};\n\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\n\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${value}`);\n  }\n  return value;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value, {\n  precision = config.precision || 4\n} = {}) {\n  value = round(value);\n  return parseFloat(value.toPrecision(precision));\n}\n\nexport function formatAngle(value, {\n  precision = config.precision || 4,\n  printDegrees = config.printAngles\n} = {}) {\n  value = printDegrees ? degrees(value) : value;\n  value = round(value);\n  return `${parseFloat(value.toPrecision(precision))}${printDegrees ? 'Â°' : ''}`;\n}\n\n// Returns true if value is either an array or a typed array\n// Note: does not return true for ArrayBuffers and DataViews\nexport function isArray(value) {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && value.length !== undefined);\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(value, func) {\n  if (isArray(value)) {\n    const result = clone(value);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n    return result;\n  }\n  return func(value);\n}\n\n//\n// GLSL math function equivalents\n// Works on both single values and vectors\n//\n\nexport function radians(degrees) {\n  return map(degrees, degrees => degrees / 180 * Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function degrees(radians) {\n  return map(radians, radians => radians * 180 / Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function sin(radians) {\n  return map(radians, angle => Math.sin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function cos(radians) {\n  return map(radians, angle => Math.cos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function tan(radians) {\n  return map(radians, angle => Math.tan(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function asin(radians) {\n  return map(radians, angle => Math.asin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function acos(radians) {\n  return map(radians, angle => Math.acos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function atan(radians) {\n  return map(radians, angle => Math.atan(angle));\n}\n\nexport function clamp(value, min, max) {\n  return map(value, value => Math.max(min, Math.min(max, value)));\n}\n\nexport function equals(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n"]}
{"version":3,"sources":["../src/quaternion.js"],"names":["validateQuaternion","IDENTITY_QUATERNION","q","Number","isFinite","length","Quaternion","x","y","z","w","Array","isArray","copy","set","m","check","a","b","Error","vectorA","vectorB","t","rad","i","j","k","l","axis","start","target","ratio","value"],"mappings":"ikBAiDgBA,kB,CAAAA,kB,CA7BhB,uqD,+2BA2BA,GAAMC,qBAAsB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA5B,CAEO,QAASD,mBAAT,CAA4BE,CAA5B,CAA+B,qBAElCC,OAAOC,QAF2B,CACpC,MAAoB,EAAb,KAAEC,MAAF,EACL,gBAAgBH,EAAE,CAAF,CAAhB,CADK,EACoB,gBAAgBA,EAAE,CAAF,CAAhB,CADpB,EAEL,gBAAgBA,EAAE,CAAF,CAAhB,CAFK,EAEoB,gBAAgBA,EAAE,CAAF,CAAhB,CAC5B,C,GAEoBI,W,sBAEnB,qBAAwC,IAA5BC,EAA4B,wDAAxB,CAAwB,CAArBC,CAAqB,wDAAjB,CAAiB,CAAdC,CAAc,wDAAV,CAAU,CAAPC,CAAO,wDAAH,CAAG,wJAElCC,OAAMC,OAAN,CAAcL,CAAd,GAAyC,CAArB,aAAUF,MAFI,CAGpC,MAAKQ,IAAL,CAAUN,CAAV,CAHoC,CAKpC,MAAKO,GAAL,CAASP,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAkBC,CAAlB,CALoC,MAOvC,C,+GAKWK,C,CAAG,CAGb,MAFA,sBAAc,IAAd,CAAoBA,CAApB,CAEA,CADA,KAAKC,KAAL,EACA,CAAO,IACR,C,8CAGUT,C,CAAGC,C,CAAGC,C,CAAGC,C,CAAG,CACrB,MAAO,MAAKI,GAAL,CAASP,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAkBC,CAAlB,CACR,C,2CAGU,CAGT,MAFA,uBAAc,IAAd,CAEA,CADA,KAAKM,KAAL,EACA,CAAO,IACR,C,uCAgBQ,CACP,MAAO,qBAAY,IAAZ,CACR,C,qDAGgB,CACf,MAAO,4BAAmB,IAAnB,CACR,C,gCAIGC,C,CAAGC,C,CAAG,CACR,GAAI,UAAJ,CACE,KAAM,IAAIC,MAAJ,CAAU,wCAAV,CAAN,CAEF,MAAO,kBAAS,IAAT,CAAeF,CAAf,CACR,C,8CAoBUG,O,CAASC,O,CAAS,CAG3B,MAFA,yBAAgB,IAAhB,CAAsBD,OAAtB,CAA+BC,OAA/B,CAEA,CADA,KAAKL,KAAL,EACA,CAAO,IACR,C,gCAeGC,C,CAAGC,C,CAAG,CACR,GAAI,UAAJ,CACE,KAAM,IAAIC,MAAJ,CAAU,wCAAV,CAAN,CAIF,MAFA,kBAAS,IAAT,CAAeF,CAAf,CAEA,CADA,KAAKD,KAAL,EACA,CAAO,IACR,C,+CAIY,CAGX,MAFA,yBAAgB,IAAhB,CAAsB,IAAtB,CAEA,CADA,KAAKA,KAAL,EACA,CAAO,IACR,C,6CAIW,CAGV,MAFA,wBAAe,IAAf,CAAqB,IAArB,CAEA,CADA,KAAKA,KAAL,EACA,CAAO,IACR,C,uCAGQ,CAGP,MAFA,qBAAY,IAAZ,CAAkB,IAAlB,CAEA,CADA,KAAKA,KAAL,EACA,CAAO,IACR,C,kCAGIC,C,CAAGC,C,CAAGI,C,CAAG,CAGZ,MAFA,mBAAU,IAAV,CAAgBL,CAAhB,CAAmBC,CAAnB,CAAsBI,CAAtB,CAEA,CADA,KAAKN,KAAL,EACA,CAAO,IACR,C,0CAGQC,C,CAAGC,C,CAAG,CACb,GAAI,UAAJ,CACE,KAAM,IAAIC,MAAJ,CAAU,6CAAV,CAAN,CAIF,MAFA,uBAAc,IAAd,CAAoB,IAApB,CAA0BD,CAA1B,CAEA,CADA,KAAKF,KAAL,EACA,CAAO,IACR,C,6CAGW,CAGV,MAFA,wBAAe,IAAf,CAAqB,IAArB,CAEA,CADA,KAAKA,KAAL,EACA,CAAO,IACR,C,wCAGOO,G,CAAK,CAGX,MAFA,sBAAa,IAAb,CAAmB,IAAnB,CAAyBA,GAAzB,CAEA,CADA,KAAKP,KAAL,EACA,CAAO,IACR,C,wCAGOO,G,CAAK,CAGX,MAFA,sBAAa,IAAb,CAAmB,IAAnB,CAAyBA,GAAzB,CAEA,CADA,KAAKP,KAAL,EACA,CAAO,IACR,C,wCAGOO,G,CAAK,CAGX,MAFA,sBAAa,IAAb,CAAmB,IAAnB,CAAyBA,GAAzB,CAEA,CADA,KAAKP,KAAL,EACA,CAAO,IACR,C,oCAGKE,C,CAAG,CAGP,MAFA,oBAAW,IAAX,CAAiB,IAAjB,CAAuBA,CAAvB,CAEA,CADA,KAAKF,KAAL,EACA,CAAO,IACR,C,gCAGGQ,C,CAAGC,C,CAAGC,C,CAAGC,C,CAAG,CAGd,MAFA,kBAAS,IAAT,CAAeH,CAAf,CAAkBC,CAAlB,CAAqBC,CAArB,CAAwBC,CAAxB,CAEA,CADA,KAAKX,KAAL,EACA,CAAO,IACR,C,kDAGYY,I,CAAML,G,CAAK,CAGtB,MAFA,2BAAkB,IAAlB,CAAwBK,IAAxB,CAA8BL,GAA9B,CAEA,CADA,KAAKP,KAAL,EACA,CAAO,IACR,C,yCAGmD,qBAA7Ca,KAA6C,CAA7CA,KAA6C,qBAArC5B,mBAAqC,YAAhB6B,MAAgB,MAAhBA,MAAgB,CAARC,KAAQ,MAARA,KAAQ,CAGlD,MAFA,oBAAW,IAAX,CAAiBF,KAAjB,CAAwBC,MAAxB,CAAgCC,KAAhC,CAEA,CADA,KAAKf,KAAL,EACA,CAAO,IACR,C,oCA1Kc,CAAE,MAAO,EAAI,C,6BACf,CAAE,MAAO,MAAK,CAAL,CAAU,C,kBAC1BgB,K,CAAO,CAAE,MAAO,MAAK,CAAL,EAAU,wBAAYA,KAAZ,CAAqB,C,6BACxC,CAAE,MAAO,MAAK,CAAL,CAAU,C,kBAC1BA,K,CAAO,CAAE,MAAO,MAAK,CAAL,EAAU,wBAAYA,KAAZ,CAAqB,C,6BACxC,CAAE,MAAO,MAAK,CAAL,CAAU,C,kBAC1BA,K,CAAO,CAAE,MAAO,MAAK,CAAL,EAAU,wBAAYA,KAAZ,CAAqB,C,6BACxC,CAAE,MAAO,MAAK,CAAL,CAAU,C,kBAC1BA,K,CAAO,CAAE,MAAO,MAAK,CAAL,EAAU,wBAAYA,KAAZ,CAAqB,C,qDA1ClC1B,U","file":"quaternion.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport quat_fromMat3 from 'gl-quat/fromMat3';\nimport quat_identity from 'gl-quat/identity';\nimport quat_length from 'gl-quat/length';\nimport quat_squaredLength from 'gl-quat/squaredLength';\nimport quat_dot from 'gl-quat/dot';\n// import quat_getAxisAngle from 'gl-quat/getAxisAngle';\nimport quat_rotationTo from 'gl-quat/rotationTo';\nimport quat_add from 'gl-quat/add';\nimport quat_calculateW from 'gl-quat/calculateW';\nimport quat_conjugate from 'gl-quat/conjugate';\nimport quat_invert from 'gl-quat/invert';\nimport quat_lerp from 'gl-quat/lerp';\nimport quat_multiply from 'gl-quat/multiply';\nimport quat_normalize from 'gl-quat/normalize';\nimport quat_rotateX from 'gl-quat/rotateX';\nimport quat_rotateY from 'gl-quat/rotateY';\nimport quat_rotateZ from 'gl-quat/rotateZ';\nimport quat_scale from 'gl-quat/scale';\nimport quat_set from 'gl-quat/set';\nimport quat_setAxisAngle from 'gl-quat/setAxisAngle';\nimport quat_slerp from 'gl-quat/slerp';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport function validateQuaternion(q) {\n  return q.length === 4 &&\n    Number.isFinite(q[0]) && Number.isFinite(q[1]) &&\n    Number.isFinite(q[2]) && Number.isFinite(q[3]);\n}\n\nexport default class Quaternion extends MathArray {\n  // Creates a new identity quat\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat_fromMat3(this, m);\n    this.check();\n    return this;\n  }\n\n  // Creates a new quat initialized with the given values\n  fromValues(x, y, z, w) {\n    return this.set(x, y, z, w);\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat_identity(this);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 4; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n  get w()      { return this[3]; }\n  set w(value) { return this[3] = checkNumber(value); }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  length() {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  squaredLength(a) {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat_rotationTo(this, vectorA, vectorB);\n    this.check();\n    return this;\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat_add(this, a);\n    this.check();\n    return this;\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat_calculateW(this, this);\n    this.check();\n    return this;\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_inverse and produces the same result.\n  conjugate() {\n    quat_conjugate(this, this);\n    this.check();\n    return this;\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat_invert(this, this);\n    this.check();\n    return this;\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat_lerp(this, a, b, t);\n    this.check();\n    return this;\n  }\n\n  // Multiplies two quat's\n  multiply(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.multiply only takes one argument');\n    }\n    quat_multiply(this, this, b);\n    this.check();\n    return this;\n  }\n\n  // Normalize a quat\n  normalize() {\n    quat_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat_rotateX(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat_rotateY(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat_rotateZ(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat_scale(this, this, b);\n    this.check();\n    return this;\n  }\n\n  // Set the components of a quat to the given values\n  set(i, j, k, l) {\n    quat_set(this, i, j, k, l);\n    this.check();\n    return this;\n  }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    quat_setAxisAngle(this, axis, rad);\n    this.check();\n    return this;\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp({start = IDENTITY_QUATERNION, target, ratio}) {\n    quat_slerp(this, start, target, ratio);\n    this.check();\n    return this;\n  }\n}\n"]}
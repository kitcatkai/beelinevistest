{"version":3,"sources":["../src/vector.js"],"names":["Vector","Math","sqrt","lengthSquared","length","i","ELEMENTS","mathArray","distanceSquared","dist","product","magnitude","check"],"mappings":"yhDAGqBA,O,mMAQVC,KAAKC,I,yFADR,CACJ,MAAO,WAAU,KAAKC,aAAL,EAAV,CACR,C,6CAEW,CACV,MAAO,WAAU,KAAKA,aAAL,EAAV,CACR,C,qDAEe,CAEd,OADIC,QAAS,CACb,CAASC,EAAI,CAAb,CAAgBA,EAAI,KAAKC,QAAzB,CAAmC,EAAED,CAArC,CACED,QAAU,KAAKC,CAAL,EAAU,KAAKA,CAAL,CAApB,CAEF,MAAOD,OACR,C,0CAEQG,S,CAAW,CAClB,MAAO,WAAU,KAAKC,eAAL,CAAqBD,SAArB,CAAV,CACR,C,wDAEeA,S,CAAW,CAEzB,OACQE,KADR,CADIL,OAAS,CACb,CAASC,EAAI,CAAb,CAAgBA,EAAI,KAAKC,QAAzB,CAAmC,EAAED,CAArC,CACQI,IADR,CACe,KAAKJ,CAAL,EAAUE,UAAUF,CAAV,CADzB,CAEED,QAAUK,KAAOA,IAFnB,CAIA,MAAO,wBAAYL,MAAZ,CACR,C,gCAEGG,S,CAAW,CAEb,OADIG,SAAU,CACd,CAASL,EAAI,CAAb,CAAgBA,EAAI,KAAKC,QAAzB,CAAmC,EAAED,CAArC,CACEK,SAAW,KAAKL,CAAL,EAAUE,UAAUF,CAAV,CAArB,CAEF,MAAO,wBAAYK,OAAZ,CACR,C,6CAIW,CACV,GAAMN,QAAS,KAAKO,SAAL,EAAf,CACA,GAAe,CAAX,SAAJ,CACE,IAAK,GAAIN,GAAI,CAAb,CAAgBA,EAAI,KAAKC,QAAzB,CAAmC,EAAED,CAArC,CACE,KAAKA,CAAL,GAAWD,MAAX,CAGJ,MAAO,MAAKQ,KAAL,EACR,C,iDAtDkBZ,M","file":"vector.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\nexport default class Vector extends MathArray {\n\n  // ACCESSORS\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n}\n"]}